services:
    app.security.api_key_authenticator:
        class:  AppBundle\Security\ApiKeyAuthenticator
        public: false

    app.security.api_key_user_provider:
        class: AppBundle\Security\ApiKeyUserProvider
        arguments: [@app.entity.game_repository]

    app.entity.game_repository:
        class: AppBundle\Entity\GameRepository
        factory: [@doctrine, getRepository]
        arguments: ['AppBundle:Game']

    app.entity.event_repository:
        class: AppBundle\Entity\EventRepository
        factory: [@doctrine, getRepository]
        arguments: ['AppBundle:Event']

    app.controller.cors:
        class: AppBundle\Controller\CorsController

    # @todo abstract controller?
    app.controller.user:
        class: AppBundle\Controller\UserController
        arguments: [@doctrine.orm.default_entity_manager]
        calls:
            - [setContainer, [@service_container]]

    app.controller.game:
        class: AppBundle\Controller\GameController
        arguments: [@doctrine.orm.default_entity_manager, @app.entity.game_repository]
        calls:
            - [setContainer, [@service_container]]

    app.controller.event:
        class: AppBundle\Controller\EventController
        arguments: [@doctrine.orm.default_entity_manager, @app.entity.event_repository, @app.battle.battle_manager]
        calls:
            - [setContainer, [@service_container]]

    app.event_listener.cors:
        class: AppBundle\EventListener\CorsListener
        tags:
           - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }

    app.event_subscriber.entity:
        class: AppBundle\EventSubscriber\EntitySubscriber
        arguments: [@security.token_storage, @validator, @logger]
        tags:
            - { name: doctrine.event_subscriber }

    app.battle.battle_manager:
        class: AppBundle\Battle\BattleManager
        arguments: [@app.entity.event_repository]

    app.validator.only_before_start_validator:
        class: AppBundle\Validator\Constraints\OnlyBeforeStartValidator
        arguments: [@app.entity.event_repository]
        tags:
            - { name: validator.constraint_validator, alias: only_before_start_validator }

    app.validator.unique_event:
        class: AppBundle\Validator\Constraints\UniqueEventValidator
        arguments: [@app.entity.event_repository]
        tags:
            - { name: validator.constraint_validator, alias: unique_event }

    app.validator.is_allowed_to_shoot:
        class: AppBundle\Validator\Constraints\IsAllowedToShootValidator
        arguments: [@app.entity.event_repository]
        tags:
            - { name: validator.constraint_validator, alias: is_allowed_to_shoot }

    # to set a fallback for SerializedNameAnnotationStrategy https://github.com/schmittjoh/serializer/issues/334
    jms_serializer.camel_case_naming_strategy:
        class: 'JMS\Serializer\Naming\IdenticalPropertyNamingStrategy'
